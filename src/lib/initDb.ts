import { sql } from './database';

export async function initializeDatabase() {
  try {
    // Create tables
    await sql`
      CREATE TABLE IF NOT EXISTS customers (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          branch VARCHAR(255) NOT NULL,
          phone VARCHAR(20) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS engineers (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          specialization VARCHAR(255) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS products (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          brand VARCHAR(255) NOT NULL,
          type VARCHAR(255) NOT NULL,
          model VARCHAR(255) NOT NULL,
          serial VARCHAR(255) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS spare_parts (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          warehouse VARCHAR(255) NOT NULL,
          quantity INTEGER NOT NULL DEFAULT 0,
          code VARCHAR(50) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS complaints (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          customer_id INTEGER REFERENCES customers(id),
          product_id INTEGER REFERENCES products(id),
          engineer_id INTEGER REFERENCES engineers(id),
          description TEXT NOT NULL,
          type VARCHAR(50) NOT NULL CHECK (type IN ('warranty', 'comprehensive_contract', 'non_comprehensive_contract', 'out_of_warranty')),
          status VARCHAR(50) NOT NULL DEFAULT 'open' CHECK (status IN ('open', 'under_investigation', 'closed')),
          repair_type VARCHAR(50) CHECK (repair_type IN ('with_spare_parts', 'without_spare_parts')),
          repair_notes TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS complaint_spare_parts (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          complaint_id INTEGER REFERENCES complaints(id) ON DELETE CASCADE,
          spare_part_id INTEGER REFERENCES spare_parts(id),
          quantity_used INTEGER NOT NULL DEFAULT 1,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS users (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          email VARCHAR(255),
          phone VARCHAR(20),
          role VARCHAR(50) NOT NULL CHECK (role IN ('admin', 'engineer', 'complaints_only')),
          view_all_warehouses BOOLEAN DEFAULT false,
          manage_complaints BOOLEAN DEFAULT false,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS system_settings (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          setting_key VARCHAR(100) UNIQUE NOT NULL,
          setting_value TEXT NOT NULL,
          setting_type VARCHAR(50) DEFAULT 'string',
          description TEXT,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS complaint_types (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          type_key VARCHAR(50) UNIQUE NOT NULL,
          type_label VARCHAR(255) NOT NULL,
          is_active BOOLEAN DEFAULT true,
          sort_order INTEGER DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS user_preferences (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
          preference_key VARCHAR(100) NOT NULL,
          preference_value TEXT NOT NULL,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(user_id, preference_key)
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS statistics_cache (
          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          stat_key VARCHAR(100) UNIQUE NOT NULL,
          stat_value NUMERIC,
          calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;



    // Insert default data
    const userExists = await sql`SELECT id FROM users WHERE role = 'admin' LIMIT 1`;
    if (userExists.length === 0) {
      await sql`
        INSERT INTO users (name, email, phone, role, view_all_warehouses, manage_complaints) 
        VALUES ('إدارة النظام', 'admin@company.com', '+966501234567', 'admin', true, true)
      `;
    }

    // Insert default complaint types
    const typesExist = await sql`SELECT id FROM complaint_types LIMIT 1`;
    if (typesExist.length === 0) {
      await sql`
        INSERT INTO complaint_types (type_key, type_label, sort_order) VALUES
        ('warranty', 'ضمان', 1),
        ('comprehensive_contract', 'عقد شامل', 2),
        ('non_comprehensive_contract', 'عقد غير شامل', 3),
        ('out_of_warranty', 'خارج الضمان', 4)
      `;
    }

    // Insert default system settings
    const settingsExist = await sql`SELECT id FROM system_settings LIMIT 1`;
    if (settingsExist.length === 0) {
      await sql`
        INSERT INTO system_settings (setting_key, setting_value, setting_type, description) VALUES
        ('low_stock_threshold', '10', 'number', 'الحد الأدنى للمخزون قبل التنبيه'),
        ('session_timeout', '30', 'number', 'مهلة انتهاء الجلسة بالدقائق'),
        ('max_file_size', '10', 'number', 'الحد الأقصى لحجم الملف بالميجابايت'),
        ('auto_assign_engineers', 'true', 'boolean', 'إسناد تلقائي للمهندسين'),
        ('enable_backup', 'true', 'boolean', 'تفعيل النسخ الاحتياطي'),
        ('company_name', 'شركة الصيانة المتقدمة', 'string', 'اسم الشركة'),
        ('support_email', 'support@company.com', 'string', 'بريد الدعم الفني'),
        ('support_phone', '+966501234567', 'string', 'هاتف الدعم الفني')
      `;
    }



    // Sample data insertion removed - engineers and spare parts should be managed through the UI only

    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Error initializing database:', error);
    throw error;
  }
}